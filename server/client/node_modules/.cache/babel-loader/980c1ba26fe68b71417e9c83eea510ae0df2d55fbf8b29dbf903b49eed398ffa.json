{"ast":null,"code":"var _jsxFileName = \"/Users/alexramos/Repos/KexeMx/wharesponde/wharesponde/server/client/src/features/LogosSection/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './LogosSection.module.css';\n// Puedes importar un icono de placeholder si tienes uno, por ejemplo:\n// import EmptyImageIcon from '../../components/Icons/EmptyImageIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogosSection = () => {\n  _s();\n  const [logosData, setLogosData] = useState([]); // Datos crudos de la API\n  const [loadedLogos, setLoadedLogos] = useState({}); // Almacena las imágenes cargadas o estado de error\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [imageLoadErrors, setImageLoadErrors] = useState({}); // Para rastrear errores de carga de imágenes\n\n  useEffect(() => {\n    // Realizar llamada a la API para obtener logos desde el backend\n    const fetchLogos = async () => {\n      try {\n        setIsLoading(true);\n        const response = await fetch('/api/admin/get_brands');\n        const result = await response.json();\n        if (result.success) {\n          setLogosData(result.data);\n          setError(null);\n        } else {\n          setError(new Error(result.msg || 'Error fetching logos'));\n          setLogosData([]);\n        }\n      } catch (err) {\n        console.error('Error fetching logos:', err);\n        setError(err);\n        setLogosData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchLogos();\n  }, []); // Se ejecuta solo una vez al montar para obtener los datos de la API\n\n  useEffect(() => {\n    // Intentar cargar cada imagen una vez que los datos de los logos estén disponibles\n    const loadImages = () => {\n      const errors = {};\n      const loaded = {};\n      logosData.forEach(logo => {\n        try {\n          // Intentar requerir la imagen dinámicamente\n          // La ruta relativa a client/src/media desde este archivo es ../../media\n          loaded[logo.id] = require(`../../media/${logo.filename}`).default;\n        } catch (err) {\n          // Si falla el require (archivo no encontrado por Webpack)\n          console.warn(`Could not load image for logo ID ${logo.id}: ${logo.filename}`, err.message);\n          errors[logo.id] = true; // Marcar este logo con error\n        }\n      });\n      setLoadedLogos(loaded);\n      setImageLoadErrors(errors);\n    };\n    if (logosData.length > 0) {\n      loadImages();\n    } else if (!isLoading && !error) {\n      // Si no hay datos y no está cargando ni hay error de API, puede que no haya logos\n      setLoadedLogos({});\n      setImageLoadErrors({});\n    }\n  }, [logosData, isLoading, error]); // Se ejecuta cuando logosData, isLoading o error cambian\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.logosSection,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Cargando logos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 87\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 53\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.logosSection,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Error al cargar logos: \", error.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 87\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 53\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si no hay datos de logos después de cargar (ni errores), no renderizar la sección\n  if (logosData.length === 0 && Object.keys(loadedLogos).length === 0 && Object.keys(imageLoadErrors).length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.logosSection,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.heading,\n        children: \"Verificado por las marcas m\\xE1s din\\xE1micas en mercados emergentes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.logosGrid,\n        children: logosData.map(logo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.logoItem,\n          children: loadedLogos[logo.id] ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: loadedLogos[logo.id],\n            alt: `Logo ${logo.id}`,\n            className: styles.logoImage\n            // No necesitamos onError aquí ya que manejamos el error de require\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this) :\n          /*#__PURE__*/\n          // Placeholder o icono de vacío si la imagen no se pudo cargar\n          _jsxDEV(\"div\", {\n            className: styles.logoPlaceholder,\n            children: [\" \", \"Imagen no disponible\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)\n        }, logo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(LogosSection, \"Zz/dGVAAG9bBd9c2dh7PjCfQ1G0=\");\n_c = LogosSection;\nexport default LogosSection;\nvar _c;\n$RefreshReg$(_c, \"LogosSection\");","map":{"version":3,"names":["React","useState","useEffect","styles","jsxDEV","_jsxDEV","LogosSection","_s","logosData","setLogosData","loadedLogos","setLoadedLogos","isLoading","setIsLoading","error","setError","imageLoadErrors","setImageLoadErrors","fetchLogos","response","fetch","result","json","success","data","Error","msg","err","console","loadImages","errors","loaded","forEach","logo","id","require","filename","default","warn","message","length","className","logosSection","children","container","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","heading","logosGrid","map","logoItem","src","alt","logoImage","logoPlaceholder","_c","$RefreshReg$"],"sources":["/Users/alexramos/Repos/KexeMx/wharesponde/wharesponde/server/client/src/features/LogosSection/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './LogosSection.module.css';\n// Puedes importar un icono de placeholder si tienes uno, por ejemplo:\n// import EmptyImageIcon from '../../components/Icons/EmptyImageIcon';\n\nconst LogosSection = () => {\n  const [logosData, setLogosData] = useState([]); // Datos crudos de la API\n  const [loadedLogos, setLoadedLogos] = useState({}); // Almacena las imágenes cargadas o estado de error\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [imageLoadErrors, setImageLoadErrors] = useState({}); // Para rastrear errores de carga de imágenes\n\n  useEffect(() => {\n    // Realizar llamada a la API para obtener logos desde el backend\n    const fetchLogos = async () => {\n      try {\n        setIsLoading(true);\n        const response = await fetch('/api/admin/get_brands');\n        const result = await response.json();\n\n        if (result.success) {\n          setLogosData(result.data);\n          setError(null);\n        } else {\n          setError(new Error(result.msg || 'Error fetching logos'));\n          setLogosData([]);\n        }\n      } catch (err) {\n        console.error('Error fetching logos:', err);\n        setError(err);\n        setLogosData([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchLogos();\n  }, []); // Se ejecuta solo una vez al montar para obtener los datos de la API\n\n  useEffect(() => {\n    // Intentar cargar cada imagen una vez que los datos de los logos estén disponibles\n    const loadImages = () => {\n      const errors = {};\n      const loaded = {};\n      logosData.forEach(logo => {\n        try {\n          // Intentar requerir la imagen dinámicamente\n          // La ruta relativa a client/src/media desde este archivo es ../../media\n          loaded[logo.id] = require(`../../media/${logo.filename}`).default;\n        } catch (err) {\n          // Si falla el require (archivo no encontrado por Webpack)\n          console.warn(`Could not load image for logo ID ${logo.id}: ${logo.filename}`, err.message);\n          errors[logo.id] = true; // Marcar este logo con error\n        }\n      });\n      setLoadedLogos(loaded);\n      setImageLoadErrors(errors);\n    };\n\n    if (logosData.length > 0) {\n      loadImages();\n    } else if (!isLoading && !error) {\n      // Si no hay datos y no está cargando ni hay error de API, puede que no haya logos\n      setLoadedLogos({});\n      setImageLoadErrors({});\n    }\n\n  }, [logosData, isLoading, error]); // Se ejecuta cuando logosData, isLoading o error cambian\n\n  if (isLoading) {\n    return <section className={styles.logosSection}><div className={styles.container}><p>Cargando logos...</p></div></section>;\n  }\n\n  if (error) {\n    return <section className={styles.logosSection}><div className={styles.container}><p>Error al cargar logos: {error.message}</p></div></section>;\n  }\n\n  // Si no hay datos de logos después de cargar (ni errores), no renderizar la sección\n  if (logosData.length === 0 && Object.keys(loadedLogos).length === 0 && Object.keys(imageLoadErrors).length === 0) {\n     return null;\n  }\n\n  return (\n    <section className={styles.logosSection}>\n      <div className={styles.container}>\n        <h2 className={styles.heading}>Verificado por las marcas más dinámicas en mercados emergentes</h2>\n        <div className={styles.logosGrid}>\n          {logosData.map(logo => (\n            <div key={logo.id} className={styles.logoItem}>\n              {/* Mostrar la imagen si se cargó correctamente, de lo contrario mostrar un placeholder */}\n              {loadedLogos[logo.id] ? (\n                <img \n                  src={loadedLogos[logo.id]} \n                  alt={`Logo ${logo.id}`}\n                  className={styles.logoImage}\n                  // No necesitamos onError aquí ya que manejamos el error de require\n                />\n              ) : (\n                // Placeholder o icono de vacío si la imagen no se pudo cargar\n                <div className={styles.logoPlaceholder}> {/* Usar un div para el placeholder */}\n                   {/* Puedes poner un icono SVG o texto aquí */}\n                   {/* <EmptyImageIcon /> */}\n                   Imagen no disponible\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default LogosSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}